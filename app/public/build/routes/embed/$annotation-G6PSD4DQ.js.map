{
  "version": 3,
  "sources": ["../../../../app/routes/embed/$annotation.tsx"],
  "sourcesContent": ["import {\r\n  ActionFunction,\r\n  FormData,\r\n  json,\r\n  LoaderFunction,\r\n} from \"@remix-run/node\";\r\nimport { Form, useFetcher, useLoaderData, useLocation } from \"@remix-run/react\";\r\nimport React from \"react\";\r\nimport { getUserSession } from \"~/services/session.server\";\r\nimport { db } from \"~/utils/db.server\";\r\n\r\nexport const loader: LoaderFunction = async ({ request, params }) => {\r\n  const questionId = params.annotation;\r\n  let user = await getUserSession(request);\r\n  try {\r\n    let likes = await db.likes.findMany({\r\n      where: {\r\n        questionId,\r\n      },\r\n    });\r\n    let dislikes = await db.disLikes.findMany({\r\n      where: {\r\n        questionId,\r\n      },\r\n    });\r\n    return {\r\n      user,\r\n      questionId,\r\n      likeCount: likes.length,\r\n      dislikeCount: dislikes.length,\r\n    };\r\n  } catch (e) {\r\n    throw new Error(\"couldnt load vote data\");\r\n  }\r\n};\r\n\r\n// export const action: ActionFunction = async ({ request }) => {\r\n//   const formData = await request.formData();\r\n//   const actionType = formData.get(\"_action\");\r\n//   const questionId = formData.get(\"questionId\");\r\n\r\n//   let { username } = await getUserSession(request);\r\n//   let user = await db.user.findUnique({\r\n//     where: {\r\n//       username,\r\n//     },\r\n//   });\r\n//  if (actionType === \"likeVote\") {\r\n//   try {\r\n//     const like = await db.likes.findFirst({\r\n//       where: {\r\n//         userId: user?.id,\r\n//       },\r\n//     });\r\n//     if (!like) {\r\n//       await db.likes.create({\r\n//         data: {\r\n//           userId: user?.id,\r\n//           questionId,\r\n//         },\r\n//       });\r\n//     } else {\r\n//       await db.likes.delete({\r\n//         where: {\r\n//           userId: user?.id,\r\n//         },\r\n//       });\r\n//     }\r\n//   } catch (e) {\r\n//     console.log(e);\r\n//   }\r\n// }\r\n// if (actionType === \"dislikeVote\") {\r\n//   try {\r\n//     const dislike = await db.disLikes.findFirst({\r\n//       where: {\r\n//         userId: user?.id,\r\n//       },\r\n//     });\r\n//     if (!dislike) {\r\n//       await db.disLikes.create({\r\n//         data: {\r\n//           userId: user?.id,\r\n//           questionId,\r\n//         },\r\n//       });\r\n//     } else {\r\n//       await db.disLikes.delete({\r\n//         where: {\r\n//           userId: user?.id,\r\n//         },\r\n//       });\r\n//     }\r\n//   } catch (e) {\r\n//     console.log(e);\r\n//   }\r\n// }\r\n//   return json({\r\n//     message: actionType,\r\n//   });\r\n// };\r\n\r\nexport default function embed() {\r\n  let loaderData = useLoaderData();\r\n  return (\r\n    <>\r\n      <Form method=\"post\" style={{ display: \"flex\", gap: 10 }}>\r\n        <input\r\n          type=\"hidden\"\r\n          name=\"questionId\"\r\n          value={loaderData.questionId}\r\n        ></input>\r\n        <button\r\n          name=\"_action\"\r\n          value=\"likeVote\"\r\n          type=\"submit\"\r\n          disabled={!loaderData.user}\r\n          className=\"py-2 px-3 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\"\r\n        >\r\n          {loaderData.likeCount}\uD83D\uDC4D\r\n        </button>\r\n        <button\r\n          name=\"_action\"\r\n          value=\"dislikeVote\"\r\n          disabled={!loaderData.user}\r\n          type=\"submit\"\r\n          className=\"py-2 px-3 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\"\r\n        >\r\n          {loaderData.dislikeCount}\uD83D\uDC4E\r\n        </button>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAQA,qBAA+B;AAC/B,gBAAmB;AAgGf;AAHW,SAAR,QAAyB;AAC9B,MAAI,aAAa,cAAc;AAC/B,SACE;AAAA,IACE,6DAAC;AAAA,MAAK,QAAO;AAAA,MAAO,OAAO,EAAE,SAAS,QAAQ,KAAK,GAAG;AAAA,MACpD;AAAA,2DAAC;AAAA,UACC,MAAK;AAAA,UACL,MAAK;AAAA,UACL,OAAO,WAAW;AAAA,WAHpB;AAAA;AAAA;AAAA;AAAA,eAIC;AAAA,QACD,mDAAC;AAAA,UACC,MAAK;AAAA,UACL,OAAM;AAAA,UACN,MAAK;AAAA,UACL,UAAU,CAAC,WAAW;AAAA,UACtB,WAAU;AAAA,UAET;AAAA,uBAAW;AAAA,YAAU;AAAA;AAAA,WAPxB;AAAA;AAAA;AAAA;AAAA,eAQA;AAAA,QACA,mDAAC;AAAA,UACC,MAAK;AAAA,UACL,OAAM;AAAA,UACN,UAAU,CAAC,WAAW;AAAA,UACtB,MAAK;AAAA,UACL,WAAU;AAAA,UAET;AAAA,uBAAW;AAAA,YAAa;AAAA;AAAA,WAP3B;AAAA;AAAA;AAAA;AAAA,eAQA;AAAA;AAAA,OAvBF;AAAA;AAAA;AAAA;AAAA,WAwBA;AAAA,KAzBF;AAAA;AAAA;AAAA;AAAA,SA0BA;AAEJ;",
  "names": []
}
