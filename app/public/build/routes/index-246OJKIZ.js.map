{
  "version": 3,
  "sources": ["empty-module:../services/session.server", "../../../app/routes/index.tsx"],
  "sourcesContent": ["module.exports = {};", "import { ActionFunction, json, LoaderFunction } from \"@remix-run/node\";\r\nimport {\r\n  Link,\r\n  useFetcher,\r\n  useFetchers,\r\n  useLoaderData,\r\n  useTransition,\r\n} from \"@remix-run/react\";\r\nimport { db } from \"~/utils/db.server\";\r\nimport React, { useMemo } from \"react\";\r\nimport { getUserSession } from \"../services/session.server\";\r\nimport { getTextList } from \"~/services/getText.server\";\r\nimport QuestionList from \"~/components/QuestionList\";\r\ntype dataType = {\r\n  user: any;\r\n  message: string;\r\n  textList: { id: number; name: string }[] | undefined;\r\n  questionList: any;\r\n};\r\nexport const loader: LoaderFunction = async ({\r\n  request,\r\n}): Promise<dataType | undefined> => {\r\n  let textList: { id: number; name: string }[] | undefined;\r\n  let userinFo: any;\r\n  let message: string = \"\";\r\n  let questionList;\r\n  const user = await getUserSession(request);\r\n  if (user?.email) {\r\n    try {\r\n      let findUserInDatabase = await db.user.findUnique({\r\n        where: { email: user.email },\r\n      });\r\n      userinFo = findUserInDatabase;\r\n    } catch (e) {\r\n      if (e) message = JSON.stringify(e);\r\n    }\r\n  }\r\n  textList = await getTextList();\r\n  try {\r\n    questionList = await db.question.findMany({\r\n      include: {\r\n        createrUser: true,\r\n        likes: true,\r\n        dislikes: true,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return { user: userinFo, message, textList, questionList };\r\n};\r\n\r\nexport default function Index() {\r\n  const data = useLoaderData();\r\n  const searchedText = useFetcher();\r\n\r\n  const list = useMemo(\r\n    () => searchedText.data || data.textList,\r\n    [data.textList, searchedText.data]\r\n  );\r\n  return (\r\n    <div style={{ fontFamily: \"system-ui, sans-serif\", lineHeight: \"1.4\" }}>\r\n      <p style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        Welcome {data.user?.username}\r\n      </p>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-around\",\r\n          flexDirection: \"row\",\r\n          padding: 20,\r\n        }}\r\n      >\r\n        <div\r\n          className=\"textList\"\r\n          style={{ maxHeight: 600, overflowY: \"scroll\" }}\r\n        >\r\n          <h1>Available Text</h1>\r\n          <searchedText.Form method=\"get\" action=\"/api/text-search\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"textSearch\"\r\n              placeholder=\"search text\"\r\n            ></input>\r\n            <button\r\n              type=\"submit\"\r\n              style={{\r\n                background: searchedText.state === \"idle\" ? \"#eee\" : \"#ccc\",\r\n                padding: 4,\r\n              }}\r\n            >\r\n              search\r\n            </button>\r\n          </searchedText.Form>\r\n          {list.map((list: { id: number; name: string }) => {\r\n            return (\r\n              <p key={\"textList-\" + list.id}>\r\n                <strong>{list.id}</strong>\r\n                <Link to={\"/texts/\" + list.id} key={list.id}>\r\n                  {list.name}\r\n                </Link>\r\n              </p>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"questionList\">\r\n          <QuestionList\r\n            list={data.questionList}\r\n            QuestionTitle={\"recent Questions\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACQlB,gBAAmB;AACnB,IAAAA,gBAA+B;AAC/B,qBAA+B;AAC/B,qBAA4B;AAoDtB;AAVS,SAAR,QAAyB;AArDhC;AAsDE,QAAM,OAAO,cAAc;AAC3B,QAAM,eAAe,WAAW;AAEhC,QAAM,WAAO;AAAA,IACX,MAAM,aAAa,QAAQ,KAAK;AAAA,IAChC,CAAC,KAAK,UAAU,aAAa,IAAI;AAAA,EACnC;AACA,SACE,mDAAC;AAAA,IAAI,OAAO,EAAE,YAAY,yBAAyB,YAAY,MAAM;AAAA,IACnE;AAAA,yDAAC;AAAA,QAAE,OAAO,EAAE,SAAS,QAAQ,gBAAgB,SAAS;AAAA,QAAG;AAAA;AAAA,WAC9C,UAAK,SAAL,mBAAW;AAAA;AAAA,SADtB;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC;AAAA,QACC,OAAO;AAAA,UACL,SAAS;AAAA,UACT,gBAAgB;AAAA,UAChB,eAAe;AAAA,UACf,SAAS;AAAA,QACX;AAAA,QAEA;AAAA,6DAAC;AAAA,YACC,WAAU;AAAA,YACV,OAAO,EAAE,WAAW,KAAK,WAAW,SAAS;AAAA,YAE7C;AAAA,iEAAC;AAAA,gBAAG;AAAA,iBAAJ;AAAA;AAAA;AAAA;AAAA,qBAAkB;AAAA,cAClB,mDAAC,aAAa,MAAb;AAAA,gBAAkB,QAAO;AAAA,gBAAM,QAAO;AAAA,gBACrC;AAAA,qEAAC;AAAA,oBACC,MAAK;AAAA,oBACL,MAAK;AAAA,oBACL,aAAY;AAAA,qBAHd;AAAA;AAAA;AAAA;AAAA,yBAIC;AAAA,kBACD,mDAAC;AAAA,oBACC,MAAK;AAAA,oBACL,OAAO;AAAA,sBACL,YAAY,aAAa,UAAU,SAAS,SAAS;AAAA,sBACrD,SAAS;AAAA,oBACX;AAAA,oBACD;AAAA,qBAND;AAAA;AAAA;AAAA;AAAA,yBAQA;AAAA;AAAA,iBAdF;AAAA;AAAA;AAAA;AAAA,qBAeA;AAAA,cACC,KAAK,IAAI,CAACC,UAAuC;AAChD,uBACE,mDAAC;AAAA,kBACC;AAAA,uEAAC;AAAA,sBAAQ,UAAAA,MAAK;AAAA,uBAAd;AAAA;AAAA;AAAA;AAAA,2BAAiB;AAAA,oBACjB,mDAAC;AAAA,sBAAK,IAAI,YAAYA,MAAK;AAAA,sBACxB,UAAAA,MAAK;AAAA,uBAD4BA,MAAK,IAAzC;AAAA;AAAA;AAAA;AAAA,2BAEA;AAAA;AAAA,mBAJM,cAAcA,MAAK,IAA3B;AAAA;AAAA;AAAA;AAAA,uBAKA;AAAA,cAEJ,CAAC;AAAA;AAAA,aA9BH;AAAA;AAAA;AAAA;AAAA,iBA+BA;AAAA,UACA,mDAAC;AAAA,YAAI,WAAU;AAAA,YACb,6DAAC;AAAA,cACC,MAAM,KAAK;AAAA,cACX,eAAe;AAAA,eAFjB;AAAA;AAAA;AAAA;AAAA,mBAGA;AAAA,aAJF;AAAA;AAAA;AAAA;AAAA,iBAKA;AAAA;AAAA,SA7CF;AAAA;AAAA;AAAA;AAAA,aA8CA;AAAA;AAAA,KAlDF;AAAA;AAAA;AAAA;AAAA,SAmDA;AAEJ;",
  "names": ["import_react", "list"]
}
